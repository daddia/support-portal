import { Command } from '@oclif/core';
import readBlueprintOnDisk from '../../actions/blueprints/read-blueprint.js';
import { listStacks } from '../../actions/blueprints/stacks.js';
import { bold, boldnblue, yellow } from '../../utils/display/colors.js';
import { formatDate } from '../../utils/display/dates.js';
export default class Stacks extends Command {
    static description = 'List all Blueprint stacks';
    static examples = ['<%= config.bin %> <%= command.id %>'];
    async run() {
        const { errors, projectResource, stackResource } = await readBlueprintOnDisk();
        if (errors.length > 0) {
            this.log('Blueprint parse errors:');
            console.dir(errors, { depth: null });
            return;
        }
        if (!projectResource)
            this.error('Project resource not found in blueprint');
        const { ok, stacks, error } = await listStacks({ projectId: projectResource.id });
        if (!ok)
            this.error(error || 'Failed to list stacks');
        if (!stacks || stacks.length === 0) {
            this.log('No stacks found');
            return;
        }
        this.log(`${bold('Project')} <${yellow(projectResource.id)}> ${bold('Stacks')} :\n`);
        for (const stack of stacks) {
            const isCurrentStack = stackResource?.name === stack.name;
            const stackName = isCurrentStack ? boldnblue(stack.name) : bold(stack.name);
            this.log(`${stackName} <${yellow(stack.id)}>${isCurrentStack ? ' (current)' : ''}`);
            if (stack.createdAt) {
                this.log(`  Created: ${formatDate(stack.createdAt)}`);
            }
            if (stack.updatedAt) {
                this.log(`  Updated: ${formatDate(stack.updatedAt)}`);
            }
            this.log(`  ${stack.resources.length} resource${stack.resources.length === 1 ? '' : 's'}`);
            this.log('');
        }
    }
}
